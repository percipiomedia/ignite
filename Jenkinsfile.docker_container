pipeline {
  // https://jenkins.io/doc/book/pipeline/jenkinsfile/
  // https://www.jfrog.com/confluence/display/RTF/Working+With+Pipeline+Jobs+in+Jenkins

  agent any

  tools {
    jdk 'jdk8'
  }

  environment {
      BRANCH_NAME = "ignite-2.7"
      RELEASE_VERSION = "2.7.0"
      REPO_URL = "https://github.com/percipiomedia/ignite.git"
      ARTIFACTORY_SERVER_ID = "jobcase"
  }

  parameters {
    string(name: 'Greeting', defaultValue: 'Hello', description: 'How should I greet the world?')
  }

  stages {
      stage ('Artifactory configuration') {
          steps {
              // rtMavenResolver closure, which defines the dependencies resolution details
              rtMavenResolver (
                  id: "MAVEN_RESOLVER",
                  serverId: "${ARTIFACTORY_SERVER_ID}",
                  releaseRepo: "libs-release",
                  snapshotRepo: "libs-snapshot"
              )

              // rtMavenDeployer closure, which defines the artifacts deployment details
              rtMavenDeployer (
                  id: "MAVEN_DEPLOYER",
                  serverId: "${ARTIFACTORY_SERVER_ID}",
                  releaseRepo: "libs-release-local",
                  snapshotRepo: "libs-snapshot-local"
              )

          }
      }

      stage ('Run Build') {
          steps {
              rtMavenRun (
                  tool: MAVEN_TOOL, // Tool name from Jenkins configuration
                  pom: 'pom.xml',
                  goals: "clean install -Pall-java,all-scala,licenses -DskipTests -Drelease.version=${RELEASE_VERSION}",
                  deployerId: "MAVEN_DEPLOYER",
                  resolverId: "MAVEN_RESOLVER"
              )
          }
      }

      stage ('Run Core Basic Unit tests') {
          steps {
              rtMavenRun (
                  tool: MAVEN_TOOL, // Tool name from Jenkins configuration
                  pom: 'modules/core/pom.xml',
                  goals: "clean test -DskipTests=false -Dtest=org.apache.ignite.testsuites.IgniteBasicTestSuite",
                  deployerId: "MAVEN_DEPLOYER",
                  resolverId: "MAVEN_RESOLVER"
              )
          }
          post {
                always {
                    junit '**/target/surefire-reports/TEST*.xml'
                }
          }
      }

      stage ('Build Assembly') {
          steps {
              rtMavenRun (
                  tool: MAVEN_TOOL, // Tool name from Jenkins configuration
                  pom: 'pom.xml',
                  goals: "initialize -Prelease -X",
                  deployerId: "MAVEN_DEPLOYER",
                  resolverId: "MAVEN_RESOLVER"
              )
          }
      }

      stage ('Publish build info') {
          steps {
              rtPublishBuildInfo (
                  serverId: "${ARTIFACTORY_SERVER_ID}"
              )
          }
      }

      stage('Get ECR Login') {
        steps {
          container('awscli')
          {
            script
            {
              withCredentials([usernamePassword(credentialsId: 'ecr-full-base', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID'), string(credentialsId: 'ecr-full-token', variable: 'AWS_SESSION_TOKEN')])
              {
                docker_login = sh (
                                script: "aws ecr --region us-east-1 get-login --no-include-email",
                                returnStdout: true
                              ).trim()
              }
            }
          }
        }
      }

      stage('Docker build') {
        steps {
          container('dind-command-1'){
            script {
              sh "${docker_login}"
              docker_image = docker.build(
                                env.GIT_URL.tokenize('/')[2].toLowerCase() + "/" + env.GIT_URL.tokenize('/')[3].split("\\.")[0].toLowerCase(),
                                "--cache-from 669820959381.dkr.ecr.us-east-1.amazonaws.com/" +
                                    env.GIT_URL.tokenize('/')[2].toLowerCase() +
                                    "/" + env.GIT_URL.tokenize('/')[3].split("\\.")[0].toLowerCase() + ":${env.BRANCH_NAME}-latest ."
                              )
            }
          }
        }
      }

  }
}
